'''
Задача 1: Класс для животного
Напиши класс Animal, который будет иметь метод say_sound(). Этот метод должен выводить строку "Гав!" для собаки.
Алгоритм:
Создай класс Animal.
Определи метод say_sound().
В методе используй print("Гав!").
'''


'''
Задача 2: Класс для числа
Напиши класс Number, который будет хранить число. Метод get_number() должен возвращать это число.
Алгоритм:
Создай класс Number.
В методе __init__ сохрани число как атрибут объекта.
Определи метод get_number(), который вернет сохраненное число.
'''


'''
Задача 3: Класс для кошки
Напиши класс Cat, который будет иметь метод say_meow(). Этот метод должен выводить строку "Мяу!".
Алгоритм:
Создай класс Cat.
Определи метод say_meow().
Выведи строку "Мяу!".
'''


'''
Задача 4: Класс для цвета
Напиши класс Color, который будет хранить название цвета. Метод get_color() должен возвращать это название.
Алгоритм:
Создай класс Color.
В методе __init__ сохрани название цвета как атрибут объекта.
Определи метод get_color(), который вернет название цвета.
'''


'''
Задача 5: Класс для машины
Напиши класс Car, который будет хранить модель машины. Метод start_engine() должен выводить строку "Двигатель запущен".
Алгоритм:
Создай класс Car.
В методе __init__ сохрани модель машины как атрибут объекта.
Определи метод start_engine(), который выведет строку "Двигатель запущен".
'''


'''
Задача 6: Класс для города
Напиши класс City, который будет хранить название города. Метод get_name() должен возвращать название.
Алгоритм:
Создай класс City.
В методе __init__ сохрани название города как атрибут объекта.
Определи метод get_name(), который вернет название города.
'''


'''
Задача 7: Класс для времени
Напиши класс Time, который будет хранить часы и минуты. Метод get_time() должен возвращать время в формате "12:30".
Алгоритм:
Создай класс Time.
В методе __init__ сохрани часы и минуты как атрибуты объекта.
Определи метод get_time(), который вернет строку в формате "чч:мм".
'''


'''
Задача 8: Класс для точки
Напиши класс Point, который будет хранить координаты x и y. Метод get_coordinates() должен возвращать кортеж (x, y).
Алгоритм:
Создай класс Point.
В методе __init__ сохрани координаты x и y как атрибуты объекта.
Определи метод get_coordinates(), который вернет (self.x, self.y).
'''

'''
Задача 9: Класс для прямоугольника (дополнительный метод)
Напиши класс Rectangle, который будет хранить ширину (width) и высоту (height). 
Добавь метод get_perimeter(), который возвращает периметр прямоугольника.
Алгоритм:
Создай класс Rectangle.
В методе __init__ сохрани ширину и высоту как атрибуты объекта.
Определи метод get_perimeter(), который вернет 2 * (self.width + self.height).
'''


'''
Задача 10: Класс для круга
Напиши класс Circle, который будет хранить радиус (radius). Добавь метод get_area(), 
который возвращает площадь круга (π * radius^2).
Алгоритм:
Создай класс Circle.
В методе __init__ сохрани радиус как атрибут объекта.
Определи метод get_area(), который вернет площадь (3.14 * self.radius ** 2).
'''


'''
Задача 11: Класс для студента
Напиши класс Student, который будет хранить имя (name) и курс (course). Добавь метод get_info(), 
который возвращает строку "Студент: [имя], Курс: [курс]".
Алгоритм:
Создай класс Student.
В методе __init__ сохрани имя и курс как атрибуты объекта.
Определи метод get_info(), который вернет форматированную строку.
'''


'''
Задача 12: Класс для телефона
Напиши класс Phone, который будет хранить номер (number). Добавь метод call(), который выводит строку "Звоню на [номер]".
Алгоритм:
Создай класс Phone.
В методе __init__ сохрани номер как атрибут объекта.
Определи метод call(), который выведет строку с номером.
'''


'''
Задача 13: Класс для автомобиля
Напиши класс Car, который будет хранить марку (brand) и год выпуска (year). Добавь метод get_age(), 
который возвращает возраст автомобиля (разницу между текущим годом и year).
Алгоритм:
Создай класс Car.
В методе __init__ сохрани марку и год выпуска как атрибуты объекта.
Определи метод get_age(), который вернет 2023 - self.year.
'''


'''
Задача 14: Класс для счета
Напиши класс BankAccount, который будет хранить баланс (balance). Добавь метод deposit(amount), 
который увеличивает баланс на указанную сумму.
Алгоритм:
Создай класс BankAccount.
В методе __init__ установи начальный баланс (self.balance = 0).
Определи метод deposit(amount), который добавляет сумму к балансу.
'''


'''
Задача 15: Класс для песни
Напиши класс Song, который будет хранить название (title) и исполнителя (artist). 
Добавь метод play(), который выводит строку "Сейчас играет: [название] — [исполнитель]".
Алгоритм:
Создай класс Song.
В методе __init__ сохрани название и исполнителя как атрибуты объекта.
Определи метод play(), который выведет информацию о песне.
'''


'''
Задача 16: Класс для треугольника
Напиши класс Triangle, который будет хранить стороны a, b, c. Добавь метод get_perimeter(), 
который возвращает периметр треугольника.
Алгоритм:
Создай класс Triangle.
В методе __init__ сохрани стороны как атрибуты объекта.
Определи метод get_perimeter(), который вернет self.a + self.b + self.c.
'''


'''
Задача 17: Класс для фильма
Напиши класс Movie, который будет хранить название (title) и год выпуска (year). 
Добавь метод get_info(), который возвращает строку "Фильм: [название], Год: [год]".
Алгоритм:
Создай класс Movie.
В методе __init__ сохрани название и год выпуска как атрибуты объекта.
Определи метод get_info(), который вернет форматированную строку.
'''


'''
Задача 18: Класс для пользователя
Напиши класс User, который будет хранить имя (name) и возраст (age). 
Добавь метод is_adult(), который возвращает True, если возраст больше или равен 18, иначе False.
Алгоритм:
Создай класс User.
В методе __init__ сохрани имя и возраст как атрибуты объекта.
Определи метод is_adult(), который проверит возраст.
'''


'''
Задача 19: Класс для книги (дополнительный метод)
Напиши класс Book, который будет хранить название (title) и автора (author). 
Добавь метод update_title(new_title), который изменяет название книги.
Алгоритм:
Создай класс Book.
В методе __init__ сохрани название и автора как атрибуты объекта.
Определи метод update_title(new_title), который обновит значение self.title.
'''


'''
Задача 20: Класс для банковской карты
Напиши класс CreditCard, который будет хранить номер карты (card_number) и баланс (balance). 
Добавь метод withdraw(amount), который уменьшает баланс на указанную сумму.
Алгоритм:
Создай класс CreditCard.
В методе __init__ сохрани номер карты и баланс как атрибуты объекта.
Определи метод withdraw(amount), который уменьшит баланс.
'''


'''
Задача 21: Класс для магазина
Напиши класс Store, который будет хранить название магазина (name) и список товаров (items). 
Добавь метод add_item(item), который добавляет товар в список.
Алгоритм:
Создай класс Store.
В методе __init__ сохрани название и создай пустой список товаров (self.items = []).
Определи метод add_item(item), который добавит товар в список.
'''


'''
Задача 22: Класс для животного (дополнительный метод)
Напиши класс Animal, который будет хранить вид (species) и возраст (age). Добавь метод is_old(), 
который возвращает True, если возраст больше 10, иначе False.
Алгоритм:
Создай класс Animal.
В методе __init__ сохрани вид и возраст как атрибуты объекта.
Определи метод is_old(), который проверит возраст.
'''


'''
Задача 23: Класс для кофемашины
Напиши класс CoffeeMachine, который будет хранить количество воды (water) и кофе (coffee). 
Добавь метод make_coffee(), который уменьшает количество воды и кофе на 10 единиц.
Алгоритм:
Создай класс CoffeeMachine.
В методе __init__ сохрани количество воды и кофе как атрибуты объекта.
Определи метод make_coffee(), который уменьшит ресурсы.
'''

