'''
6. 5 задач когда нужно использовать **kwargs
Задача 1: Вывод информации о человеке
Напиши функцию, которая принимает имя человека и произвольное количество именованных аргументов
(например, возраст, город, хобби) и выводит всю информацию о человеке.
Подсказка: Используй цикл for для прохода по словарю kwargs.
'''
def person_info(name, **kwargs):
    print(f"Имя: {name}")

    if kwargs is not None:
        for key, value in kwargs.items():
            print(f"{key.capitalize()}: {value}")
person_info("Алексей", age=37, city="Краснодар", hobby="программирование")
'''
Задача 2: Форматирование строки
Напиши функцию, которая принимает строку и произвольное количество именованных аргументов, которые необходимо
 подставить в строку вместо плейсхолдеров {}.
Подсказка: Используй метод .format() или f-строки для подстановки значений.
'''
def proizvol(text, **kwargs):
    formatted_text = text.format(**kwargs)
    return formatted_text
print(proizvol("Привет, {name}! Тебе {age} лет.", name="Алексей", age=37))
'''
Задача 3: Сумма ключевых значений
Напиши функцию, которая принимает произвольное количество именованных аргументов (ключ-значение), 
где ключ — это название параметра, а значение — число, и возвращает сумму всех значений.
Подсказка: Используй цикл for для прохода по словарю kwargs и суммируй все значения.
'''
def summaKva(**kwargs):
    kva = 0
    for key, value in kwargs.items():
        zz = value
        kva = kva + zz
    print(kva)
summaKva(a = 1, b = 2)
'''
Задача 4: Проверка наличия ключа
Напиши функцию, которая принимает произвольное количество именованных аргументов и проверяет, 
есть ли среди них ключ "name". Если есть, верни его значение, иначе верни "Имя не указано".
Подсказка: Используй метод .get() для проверки наличия ключа.
'''
def proverka(**kwargs):
    name = kwargs.get('name', "Имя не указано")
    return name

print(proverka(name="Kva", age=37))  # Вывод: Kva
print(proverka(age=37))  # Вывод: Имя не указано
'''
Задача 5: Создание словаря
Напиши функцию, которая принимает произвольное количество именованных аргументов и возвращает новый словарь, 
содержащий только те пары, где значение больше 10.
Подсказка: Используй цикл for для прохода по словарю kwargs и создай новый словарь.
'''
def slovar(**kwargs):
    kva = 0
    aa = []
    for key, value in kwargs.items():
        zz = value
        if zz > 10:
         aa.append(zz)
    print(aa)
slovar(a=9, b = 11, c = 12)
#======================================================================================================================