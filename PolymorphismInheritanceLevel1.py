#================Задачи на полиморфизм через наследование===============
'''
Задача 1: Классы животных
Напиши базовый класс Animal с методом speak(). Создай два дочерних класса: Dog и Cat.

У класса Dog метод speak() должен возвращать строку "Гав!".
У класса Cat метод speak() должен возвращать строку "Мяу!".
Алгоритм:

Создай класс Animal с методом speak(), который возвращает "Животное издает звук".
Создай класс Dog, унаследованный от Animal, и переопредели метод speak().
Создай класс Cat, унаследованный от Animal, и переопредели метод speak().
'''

'''
Задача 2: Классы книг
Напиши базовый класс Book с методом get_info(). Создай два дочерних класса: Ebook и PaperBook.

У класса Ebook метод get_info() должен добавлять информацию о формате (например, "PDF").
У класса PaperBook метод get_info() должен добавлять информацию о количестве страниц.
Алгоритм:

Создай класс Book с методом get_info(), который возвращает строку "Книга: [название], Автор: [автор]".
Создай класс Ebook, унаследованный от Book, и переопредели метод get_info().
Создай класс PaperBook, унаследованный от Book, и переопредели метод get_info().
'''

'''
Задача 3: Классы машин
Напиши базовый класс Car с методом start_engine(). Создай два дочерних класса: Truck и Sedan.

У класса Truck метод start_engine() должен возвращать строку "Грузовик запускает двигатель".
У класса Sedan метод start_engine() должен возвращать строку "Легковой автомобиль запускает двигатель".
Алгоритм:

Создай класс Car с методом start_engine(), который возвращает "Автомобиль запускает двигатель".
Создай класс Truck, унаследованный от Car, и переопредели метод start_engine().
Создай класс Sedan, унаследованный от Car, и переопредели метод start_engine().
'''

'''
Задача 4: Классы пользователей
Напиши базовый класс User с методом can_drive(). Создай два дочерних класса: Admin и Child.

У класса Admin метод can_drive() всегда должен возвращать True.
У класса Child метод can_drive() должен проверять возраст (age) и возвращать False, если возраст меньше 16.
Алгоритм:

Создай класс User с методом can_drive(), который проверяет возраст.
Создай класс Admin, унаследованный от User, и переопредели метод can_drive().
Создай класс Child, унаследованный от User, и переопредели метод can_drive().
'''

'''
Задача 5: Классы геометрических фигур
Напиши базовый класс Shape с методом area(). Создай два дочерних класса: Rectangle и Circle.

У класса Rectangle метод area() должен вычислять площадь как width * height.
У класса Circle метод area() должен вычислять площадь как π * radius^2.
Алгоритм:

Создай класс Shape с методом area(), который возвращает строку "Вычисляю площадь".
Создай класс Rectangle, унаследованный от Shape, и переопредели метод area().
Создай класс Circle, унаследованный от Shape, и переопредели метод area().
'''

'''
Задача 6: Классы телефонов
Напиши базовый класс Phone с методом call(). Создай два дочерних класса: Smartphone и BasicPhone.

У класса Smartphone метод call() должен поддерживать видеозвонки.
У класса BasicPhone метод call() должен работать только с обычными звонками.
Алгоритм:

Создай класс Phone с методом call(), который возвращает строку "Звоню на [номер]".
Создай класс Smartphone, унаследованный от Phone, и переопредели метод call().
Создай класс BasicPhone, унаследованный от Phone, и переопредели метод call().
'''

'''
Задача 7: Классы городов
Напиши базовый класс City с методом is_megacity(). Создай два дочерних класса: Capital и SmallCity.

У класса Capital метод is_megacity() должен считать город мегаполисом при населении >5 млн.
У класса SmallCity метод is_megacity() всегда должен возвращать False.
Алгоритм:

Создай класс City с методом is_megacity(), который проверяет население.
Создай класс Capital, унаследованный от City, и переопредели метод is_megacity().
Создай класс SmallCity, унаследованный от City, и переопредели метод is_megacity().
'''

'''
Задача 8: Классы банковских счетов
Напиши базовый класс BankAccount с методом withdraw(). Создай два дочерних класса: SavingsAccount и CreditCard.

У класса SavingsAccount метод withdraw() должен оставлять хотя бы 10% баланса.
У класса CreditCard метод withdraw() должен проверять лимит.
Алгоритм:

Создай класс BankAccount с методом withdraw(), который проверяет сумму на снятие.
Создай класс SavingsAccount, унаследованный от BankAccount, и переопредели метод withdraw().
Создай класс CreditCard, унаследованный от BankAccount, и переопредели метод withdraw().
'''

'''
Задача 9: Классы кофемашин
Напиши базовый класс CoffeeMachine с методом make_coffee(). Создай два дочерних класса: EspressoMachine и LatteMachine.

У класса EspressoMachine метод make_coffee() должен делать эспрессо.
У класса LatteMachine метод make_coffee() должен делать капучино.
Алгоритм:

Создай класс CoffeeMachine с методом make_coffee(), который возвращает строку "Делаю кофе".
Создай класс EspressoMachine, унаследованный от CoffeeMachine, и переопредели метод make_coffee().
Создай класс LatteMachine, унаследованный от CoffeeMachine, и переопредели метод make_coffee().
'''

'''
Задача 10: Классы учебных заведений
Напиши базовый класс School с методом add_student(). Создай два дочерних класса: University и Kindergarten.

У класса University метод add_student() должен принимать факультет студента.
У класса Kindergarten метод add_student() должен проверять возраст (age) и добавлять только детей до 7 лет.
Алгоритм:

Создай класс School с методом add_student(), который добавляет ученика.
Создай класс University, унаследованный от School, и переопредели метод add_student().
Создай класс Kindergarten, унаследованный от School, и переопредели метод add_student().
'''