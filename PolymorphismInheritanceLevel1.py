#================Задачи на полиморфизм через наследование===============
'''
Задача 11: Классы животных
Напиши базовый класс Animal с методом speak(). Создай дочерние классы Dog и Cat, которые переопределяют этот метод.

Алгоритм:

Создай базовый класс Animal с методом speak(), который возвращает "Животное издает звук".
Создай дочерний класс Dog, унаследованный от Animal.
Переопредели метод speak(), чтобы он возвращал "Гав!".
Создай дочерний класс Cat, унаследованный от Animal.
Переопредели метод speak(), чтобы он возвращал "Мяу!".
Создай список объектов (dog, cat) и вызови метод speak() для каждого.
'''

'''
Задача 12: Классы книг
Напиши базовый класс Book с методом get_info(). Создай дочерние классы Ebook и PaperBook, которые переопределяют этот метод.

Алгоритм:

Создай базовый класс Book с параметрами title и author в методе __init__.
Определи метод get_info(), который возвращает строку "Книга: [название], Автор: [автор]".
Создай дочерний класс Ebook, унаследованный от Book.
В методе __init__ класса Ebook добавь параметр file_format.
Переопредели метод get_info(), чтобы он включал формат книги.
Создай дочерний класс PaperBook, унаследованный от Book.
В методе __init__ класса PaperBook добавь параметр pages.
Переопредели метод get_info(), чтобы он включал количество страниц.
Создай список объектов (ebook, paperbook) и вызови метод get_info() для каждого.
'''

'''
Задача 13: Классы машин
Напиши базовый класс Car с методом start_engine(). Создай дочерние классы Truck и Sedan, которые переопределяют этот метод.

Алгоритм:

Создай базовый класс Car с параметрами brand и year в методе __init__.
Определи метод start_engine(), который возвращает строку "Автомобиль [марка] запускает двигатель".
Создай дочерний класс Truck, унаследованный от Car.
Переопредели метод start_engine(), чтобы он возвращал строку "Грузовик [марка] запускает двигатель".
Создай дочерний класс Sedan, унаследованный от Car.
Переопредели метод start_engine(), чтобы он возвращал строку "Легковой автомобиль [марка] запускает двигатель".
Создай список объектов (truck, sedan) и вызови метод start_engine() для каждого.
'''

'''
Задача 14: Классы телефонов
Напиши базовый класс Phone с методом call(). Создай дочерние классы Smartphone и BasicPhone, которые переопределяют этот метод.

Алгоритм:

Создай базовый класс Phone с параметром number в методе __init__.
Определи метод call(), который возвращает строку "Звоню на [номер]".
Создай дочерний класс Smartphone, унаследованный от Phone.
Переопредели метод call(), чтобы он поддерживал видеозвонки.
Создай дочерний класс BasicPhone, унаследованный от Phone.
Переопредели метод call(), чтобы он выполнял только обычные звонки.
Создай список объектов (smartphone, basic_phone) и вызови метод call() для каждого.
'''

'''
Задача 15: Классы геометрических фигур
Напиши базовый класс Shape с методом area(). Создай дочерние классы Rectangle и Circle, которые переопределяют этот метод.

Алгоритм:

Создай базовый класс Shape с методом area(), который возвращает строку "Вычисляю площадь".
Создай дочерний класс Rectangle, унаследованный от Shape.
В методе __init__ класса Rectangle добавь параметры width и height.
Переопредели метод area(), чтобы он возвращал width * height.
Создай дочерний класс Circle, унаследованный от Shape.
В методе __init__ класса Circle добавь параметр radius.
Переопредели метод area(), чтобы он возвращал 3.14 * radius ** 2.
Создай список объектов (rectangle, circle) и вызови метод area() для каждого.
'''

'''
Задача 16: Классы пользователей
Напиши базовый класс User с методом can_drive(). Создай дочерние классы Admin и Child, которые переопределяют этот метод.

Алгоритм:

Создай базовый класс User с параметрами name и age в методе __init__.
Определи метод can_drive(), который возвращает True, если age >= 16.
Создай дочерний класс Admin, унаследованный от User.
Переопредели метод can_drive(), чтобы админ мог водить всегда.
Создай дочерний класс Child, унаследованный от User.
Переопредели метод can_drive(), чтобы ребенок не мог водить никогда.
Создай список объектов (admin, child) и вызови метод can_drive() для каждого.
'''

'''
Задача 17: Классы учебных заведений
Напиши базовый класс School с методом add_student(). Создай дочерние классы University и Kindergarten, которые переопределяют этот метод.

Алгоритм:

Создай базовый класс School с параметром students (список учеников) в методе __init__.
Определи метод add_student(student), который добавляет ученика в список.
Создай дочерний класс University, унаследованный от School.
Переопредели метод add_student(student, faculty), чтобы можно было указать факультет.
Создай дочерний класс Kindergarten, унаследованный от School.
Переопредели метод add_student(child, age), чтобы добавлять детей только до 7 лет.
Создай список объектов (university, kindergarten) и вызови метод add_student() для каждого.
'''

'''
Задача 18: Классы банковских карт
Напиши базовый класс BankAccount с методом withdraw(). Создай дочерние классы SavingsAccount и CreditCard, которые переопределяют этот метод.

Алгоритм:

Создай базовый класс BankAccount с параметром balance в методе __init__.
Определи метод withdraw(amount), который уменьшает баланс.
Создай дочерний класс SavingsAccount, унаследованный от BankAccount.
Переопредели метод withdraw(amount), чтобы оставалось хотя бы 10% баланса.
Создай дочерний класс CreditCard, унаследованный от BankAccount.
Переопредели метод withdraw(amount), чтобы проверять лимит.
Создай список объектов (savings_account, credit_card) и вызови метод withdraw() для каждого.
'''

'''
Задача 19: Классы кофемашин
Напиши базовый класс CoffeeMachine с методом make_coffee(). Создай дочерние классы EspressoMachine и LatteMachine, которые переопределяют этот метод.

Алгоритм:

Создай базовый класс CoffeeMachine с параметрами water, coffee, milk в методе __init__.
Определи метод make_coffee(type), который делает обычный кофе.
Создай дочерний класс EspressoMachine, унаследованный от CoffeeMachine.
Переопредели метод make_coffee(), чтобы делать эспрессо.
Создай дочерний класс LatteMachine, унаследованный от CoffeeMachine.
Переопредели метод make_coffee(), чтобы делать капучино.
Создай список объектов (espresso_machine, latte_machine) и вызови метод make_coffee() для каждого.
'''

'''
Задача 20: Классы времени
Напиши базовый класс Time с методом is_night(). Создай дочерние классы DayTime и NightTime, которые переопределяют этот метод.

Алгоритм:

Создай базовый класс Time с параметрами hours и minutes в методе __init__.
Определи метод is_night(), который проверяет условие hours >= 22 or hours < 6.
Создай дочерний класс DayTime, унаследованный от Time.
Переопредели метод is_night(), чтобы он всегда возвращал False.
Создай дочерний класс NightTime, унаследованный от Time.
Переопредели метод is_night(), чтобы он всегда возвращал True.
Создай список объектов (day_time, night_time) и вызови метод is_night() для каждого.
'''