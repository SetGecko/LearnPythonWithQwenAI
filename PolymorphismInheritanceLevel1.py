#================Задачи на полиморфизм через наследование===============
'''
Задача 1: Классы животных
Напиши базовый класс Animal с методом speak().
Создай дочерние классы Dog и Cat, которые переопределяют этот метод.

Алгоритм:

Создай базовый класс Animal с методом speak(), который возвращает "Животное издает звук".
Создай дочерний класс Dog, который переопределяет метод speak() для вывода "Гав!".
Создай дочерний класс Cat, который переопределяет метод speak() для вывода "Мяу!".
'''

'''
Задача 2: Классы книг
Напиши базовый класс Book с методом get_info(). Создай дочерние классы Ebook и PaperBook, которые переопределяют этот метод.

Алгоритм:

Создай базовый класс Book с методом get_info(), который возвращает общую информацию о книге.
Создай дочерний класс Ebook, который добавляет информацию о формате.
Создай дочерний класс PaperBook, который добавляет информацию о количестве страниц.
'''

'''
Задача 3: Классы машин
Напиши базовый класс Car с методом start_engine(). Создай дочерние классы Truck и Sedan, которые переопределяют этот метод.

Алгоритм:

Создай базовый класс Car с методом start_engine(), который возвращает "Автомобиль запускает двигатель".
Создай дочерний класс Truck, который добавляет сообщение "Грузовик" в текст.
Создай дочерний класс Sedan, который добавляет сообщение "Легковой автомобиль".
'''

'''
Задача 4: Классы пользователей
Напиши базовый класс User с методом can_drive(). Создай дочерние классы Admin и Child, которые переопределяют этот метод.

Алгоритм:

Создай базовый класс User с методом can_drive(), который проверяет возраст (age >= 16).
Создай дочерний класс Admin, который всегда возвращает True.
Создай дочерний класс Child, который проверяет возраст.
'''

'''
Задача 5: Классы геометрических фигур
Напиши базовый класс Shape с методом area(). Создай дочерние классы Rectangle и Circle, которые переопределяют этот метод.

Алгоритм:

Создай базовый класс Shape с методом area(), который возвращает строку "Вычисляю площадь".
Создай дочерний класс Rectangle, который вычисляет площадь как width * height.
Создай дочерний класс Circle, который вычисляет площадь как π * radius^2.
'''

'''
Задача 6: Классы телефонов
Напиши базовый класс Phone с методом call(). Создай дочерние классы Smartphone и BasicPhone, которые переопределяют этот метод.

Алгоритм:

Создай базовый класс Phone с методом call(), который возвращает "Звоню на [номер]".
Создай дочерний класс Smartphone, который добавляет возможность видеозвонков.
Создай дочерний класс BasicPhone, который работает только с обычными звонками.
'''

'''
Задача 7: Классы городов
Напиши базовый класс City с методом is_megacity(). Создай дочерние классы Capital и SmallCity, которые переопределяют этот метод.

Алгоритм:

Создай базовый класс City с методом is_megacity(), который проверяет население >10 млн.
Создай дочерний класс Capital, который считает мегаполисом при населении >5 млн.
Создай дочерний класс SmallCity, который всегда возвращает False.
'''

'''
Задача 8: Классы банковских счетов
Напиши базовый класс BankAccount с методом withdraw(). Создай дочерние классы SavingsAccount и CreditCard, которые переопределяют этот метод.

Алгоритм:

Создай базовый класс BankAccount с методом withdraw(), который уменьшает баланс.
Создай дочерний класс SavingsAccount, который оставляет хотя бы 10% баланса.
Создай дочерний класс CreditCard, который проверяет лимит.
'''

'''
Задача 9: Классы кофемашин
Напиши базовый класс CoffeeMachine с методом make_coffee(). Создай дочерние классы EspressoMachine и LatteMachine, которые переопределяют этот метод.

Алгоритм:

Создай базовый класс CoffeeMachine с методом make_coffee(), который делает обычный кофе.
Создай дочерний класс EspressoMachine, который делает эспрессо.
Создай дочерний класс LatteMachine, который делает капучино.
'''

'''
Задача 10: Классы учебных заведений
Напиши базовый класс School с методом add_student(). Создай дочерние классы University и Kindergarten, которые переопределяют этот метод.

Алгоритм:

Создай базовый класс School с методом add_student(), который добавляет ученика.
Создай дочерний класс University, который добавляет студента с указанием факультета.
Создай дочерний класс Kindergarten, который проверяет возраст (age <= 7).
'''