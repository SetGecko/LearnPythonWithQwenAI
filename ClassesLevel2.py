'''
Задача 1: Класс для автомобиля
Напиши класс Car, который хранит марку (brand), год выпуска (year) и пробег (mileage).
Добавь метод drive(distance), который увеличивает пробег на указанное расстояние.
Если пробег превышает 100,000 км, добавь метод is_old(), который возвращает True.
Алгоритм:
Создай класс Car.
В методе __init__ сохрани параметры brand, year и mileage.
Определи метод drive(distance), который увеличивает пробег.
Определи метод is_old(), который проверяет условие.
'''

'''
Задача 2: Класс для банковского счета
Напиши класс BankAccount, который хранит имя владельца (owner) и баланс (balance). 
Добавь метод withdraw(amount), который уменьшает баланс. 
Если сумма превышает баланс, добавь сообщение "Недостаточно средств!". 
Также добавь метод get_balance(), который возвращает текущий баланс.
Алгоритм:
Создай класс BankAccount.
В методе __init__ сохрани параметры owner и balance.
Определи метод withdraw(amount) для списания средств.
Определи метод get_balance() для получения баланса.
'''

'''
Задача 3: Класс для прямоугольника
Напиши класс Rectangle, который хранит ширину (width) и высоту (height). 
Добавь метод scale(factor), который увеличивает размеры на указанный коэффициент. 
Также добавь метод get_area(), который возвращает площадь.
Алгоритм:
Создай класс Rectangle.
В методе __init__ сохрани параметры width и height.
Определи метод scale(factor) для масштабирования.
Определи метод get_area() для вычисления площади.
'''

'''
Задача 4: Класс для точки
Напиши класс Point, который хранит координаты x и y. 
Добавь метод distance_to(other_point), который вычисляет расстояние до другой точки. 
Также добавь метод move(dx, dy), который перемещает точку.
Алгоритм:
Создай класс Point.
В методе __init__ сохрани координаты x и y.
Определи метод distance_to(other_point) для вычисления расстояния.
Определи метод move(dx, dy) для перемещения точки.
'''

'''
Задача 5: Класс для списка покупок
Напиши класс ShoppingList, который хранит название магазина (name) и список товаров (items). 
Добавь метод add_item(item), который добавляет товар. 
Также добавь метод remove_item(item), который удаляет товар.
Алгоритм:
Создай класс ShoppingList.
В методе __init__ сохрани название и создай пустой список товаров.
Определи метод add_item(item) для добавления товара.
Определи метод remove_item(item) для удаления товара.
'''

'''
Задача 6: Класс для человека
Напиши класс Person, который хранит имя (name) и возраст (age). 
Добавь метод celebrate_birthday(), который увеличивает возраст на 1. 
Также добавь метод can_drive(), который проверяет, может ли человек водить машину (возраст >=16).
Алгоритм:
Создай класс Person.
В методе __init__ сохрани параметры name и age.
Определи метод celebrate_birthday(), который увеличивает возраст.
Определи метод can_drive(), который проверяет возраст.
'''

'''
Задача 7: Класс для книги
Напиши класс Book, который хранит название (title), автора (author) и год выпуска (year). 
Добавь метод get_age(), который возвращает возраст книги. 
Также добавь метод is_recent(), который проверяет, выпущена ли книга в последние 10 лет.
Алгоритм:
Создай класс Book.
В методе __init__ сохрани параметры title, author и year.
Определи метод get_age(), который вычисляет возраст.
Определи метод is_recent(), который проверяет год выпуска.
'''

'''
Задача 8: Класс для телефона
Напиши класс Phone, который хранит номер (number) и список вызовов (calls). 
Добавь метод add_call(call), который добавляет новый вызов. 
Также добавь метод last_call(), который возвращает последний вызов.
Алгоритм:
Создай класс Phone.
В методе __init__ сохрани параметр number и создай пустой список calls.
Определи метод add_call(call) для добавления вызова.
Определи метод last_call(), который возвращает последний элемент списка.
'''

'''
Задача 9: Класс для города
Напиши класс City, который хранит название (name) и население (population). 
Добавь метод is_megacity(), который проверяет, является ли город мегаполисом (>10 млн). 
Также добавь метод update_population(change), который изменяет население.
Алгоритм:
Создай класс City.
В методе __init__ сохрани параметры name и population.
Определи метод is_megacity(), который проверяет население.
Определи метод update_population(change), который изменяет население.
'''

'''
Задача 10: Класс для времени
Напиши класс Time, который хранит часы (hours) и минуты (minutes). 
Добавь метод add_time(other_time), который прибавляет другое время. 
Также добавь метод is_night(), который проверяет, является ли время ночью (между 22:00 и 6:00).
Алгоритм:
Создай класс Time.
В методе __init__ сохрани параметры hours и minutes.
Определи метод add_time(other_time) для сложения времени.
Определи метод is_night(), который проверяет условие.
'''

'''
Задача 11: Класс для кофемашины
Напиши класс CoffeeMachine, который хранит количество воды (water) и кофе (coffee). 
Добавь метод make_coffee(count), который делает несколько чашек кофе. 
Если ресурсов не хватает, добавь сообщение "Ресурсы исчерпаны!".
Алгоритм:
Создай класс CoffeeMachine.
В методе __init__ сохрани параметры water и coffee.
Определи метод make_coffee(count) для изготовления кофе.
Проверь ресурсы перед изготовлением.
'''

'''
Задача 12: Класс для пользователя
Напиши класс User, который хранит имя (name) и email. 
Добавь метод update_email(new_email), который обновляет email. 
Также добавь метод validate_email(), который проверяет корректность email.
Алгоритм:
Создай класс User.
В методе __init__ сохрани параметры name и email.
Определи метод update_email(new_email) для изменения email.
Определи метод validate_email(), который проверяет наличие символа "@".
'''

'''
Задача 13: Класс для треугольника
Напиши класс Triangle, который хранит стороны a, b, c. 
Добавь метод is_valid(), который проверяет, существует ли треугольник. 
Также добавь метод get_type(), который определяет тип треугольника.
Алгоритм:
Создай класс Triangle.
В методе __init__ сохрани параметры a, b, c.
Определи метод is_valid(), который проверяет сумму сторон.
Определи метод get_type(), который возвращает тип треугольника.
'''

'''
Задача 14: Класс для фильма
Напиши класс Movie, который хранит название (title), год выпуска (year) и продолжительность (duration). 
Добавь метод is_long(), который проверяет, является ли фильм длинным (>120 минут). 
Также добавь метод update_year(new_year), который меняет год выпуска.
Алгоритм:
Создай класс Movie.
В методе __init__ сохрани параметры title, year и duration.
Определи метод is_long(), который проверяет продолжительность.
Определи метод update_year(new_year), который обновляет год.
'''

'''
Задача 15: Класс для круга
Напиши класс Circle, который хранит радиус (radius). 
Добавь метод get_area(), который возвращает площадь. 
Также добавь метод is_small(), который проверяет, является ли площадь маленькой (<50).
Алгоритм:
Создай класс Circle.
В методе __init__ сохрани параметр radius.
Определи метод get_area(), который вычисляет площадь.
Определи метод is_small(), который проверяет условие.
'''

'''
Задача 16: Класс для банковской карты
Напиши класс CreditCard, который хранит номер карты (card_number) и баланс (balance). 
Добавь метод withdraw(amount), который уменьшает баланс. 
Если сумма превышает баланс, добавь сообщение "Недостаточно средств!". 
Также добавь метод transaction_history(), который сохраняет историю операций.
Алгоритм:
Создай класс CreditCard.
В методе __init__ сохрани параметры card_number и balance.
Определи метод withdraw(amount) для списания средств.
Создай атрибут history для хранения истории операций.
'''

'''
Задача 17: Класс для студента
Напиши класс Student, который хранит имя (name) и список оценок (grades). 
Добавь метод average_grade(), который возвращает среднюю оценку. 
Также добавь метод best_grade(), который возвращает максимальную оценку.
Алгоритм:
Создай класс Student.
В методе __init__ сохрани параметр name и создай пустой список grades.
Определи метод average_grade(), который вычисляет среднее значение.
Определи метод best_grade(), который находит максимальную оценку.
'''

'''
Задача 18: Класс для животного
Напиши класс Animal, который хранит вид (species) и возраст (age). 
Добавь метод can_speak(), который проверяет, может ли животное говорить (возраст >1). 
Также добавь метод update_age(years), который изменяет возраст.
Алгоритм:
Создай класс Animal.
В методе __init__ сохрани параметры species и age.
Определи метод can_speak(), который проверяет возраст.
Определи метод update_age(years), который обновляет возраст.
'''

'''
Задача 19: Класс для машины
Напиши класс Car, который хранит марку (brand), год выпуска (year) и пробег (mileage). 
Добавь метод fuel_consumption(liters), который обновляет расход топлива. 
Также добавь метод get_fuel_efficiency(), который вычисляет эффективность использования топлива.
Алгоритм:
Создай класс Car.
В методе __init__ сохрани параметры brand, year и mileage.
Определи метод fuel_consumption(liters) для обновления расхода.
Определи метод get_fuel_efficiency(), который вычисляет эффективность.
'''

'''
Задача 20: Класс для прямоугольника
Напиши класс Rectangle, который хранит ширину (width) и высоту (height). 
Добавь метод rotate(), который меняет ширину и высоту местами. 
Также добавь метод get_diagonal(), который возвращает диагональ.
Алгоритм:
Создай класс Rectangle.
В методе __init__ сохрани параметры width и height.
Определи метод rotate(), который меняет размеры местами.
Определи метод get_diagonal(), который вычисляет диагональ через теорему Пифагора.
'''

