'''
json.load(file) :
Считывает содержимое JSON-файла и преобразует его в Python-объект (словарь или список).
json.dump(data, file) :
Записывает Python-объект (словарь или список) в JSON-файл.
json.loads(json_string) :
Преобразует JSON-строку в Python-объект.
json.dumps(data) :
Преобразует Python-объект в JSON-строку.

import json

# Открываем JSON-файл для чтения
with open("data.json", "r", encoding="utf-8") as file:
    data = json.load(file)  # Преобразуем содержимое файла в Python-объект

# Работаем с данными
print(data["name"])       # Вывод: Алексей
print(data["age"])        # Вывод: 37
print(data["skills"])     # Вывод: ['Python', 'SQL', 'Git']
print(data["is_student"]) # Вывод: False
'''

'''
Задача 1: Информация о пользователе
Описание: У тебя есть JSON-файл user.json с данными о пользователе

Алгоритм:

Создай класс User, который будет хранить данные о пользователе.
В методе __init__ сохрани параметры name, age, is_student и skills.
Напиши метод get_info(), который возвращает строку формата:
"Имя: [name], Возраст: [age], Студент: [is_student], Навыки: [skills]".
Прочитай файл user.json и создай объект класса User.
Вызови метод get_info().
'''

'''
Задача 2: Список книг
Описание: У тебя есть JSON-файл books.json со списком книг
Алгоритм:

Создай базовый класс Book, который хранит название (title) и автора (author).
Создай дочерний класс Ebook, унаследованный от Book. Добавь атрибут format.
Создай дочерний класс PaperBook, унаследованный от Book. Добавь атрибут pages.
Определи метод get_info() для каждого класса, чтобы он возвращал разные строки:
Для Ebook: "Электронная книга: [title], Автор: [author], Формат: [format]".
Для PaperBook: "Печатная книга: [title], Автор: [author], Страниц: [pages]".
Прочитай файл books.json и создай список объектов (Ebook или PaperBook в зависимости от данных).
Вызови метод get_info() для каждого объекта.
'''

'''
Задача 3: Автопарк
Описание: У тебя есть JSON-файл cars.json с данными об автомобилях
Алгоритм:

Создай базовый класс Car, который хранит марку (brand) и год выпуска (year).
Создай дочерний класс Sedan, унаследованный от Car.
Создай дочерний класс Truck, унаследованный от Car. Добавь атрибут load_capacity.
Определи метод get_info() для каждого класса, чтобы он возвращал разные строки:
Для Sedan: "Легковой автомобиль: [brand], Год: [year]".
Для Truck: "Грузовик: [brand], Год: [year], Грузоподъемность: [load_capacity]".
Прочитай файл cars.json и создай список объектов (Sedan или Truck в зависимости от типа).
Вызови метод get_info() для каждого объекта.
'''

'''
Задача 4: Города
Описание: У тебя есть JSON-файл cities.json с данными о городах
Алгоритм:

Создай базовый класс City, который хранит название (name) и население (population).
Создай дочерний класс Capital, унаследованный от City. Добавь атрибут country.
Создай дочерний класс SmallCity, унаследованный от City.
Определи метод get_info() для каждого класса, чтобы он возвращал разные строки:
Для Capital: "Столица: [name], Население: [population], Страна: [country]".
Для SmallCity: "Город: [name], Население: [population]".
Прочитай файл cities.json и создай список объектов (Capital или SmallCity в зависимости от значения is_capital).
Вызови метод get_info() для каждого объекта.
'''

'''
Задача 5: Банковские счета
Описание: У тебя есть JSON-файл accounts.json с данными о счетах
Алгоритм:

Создай базовый класс BankAccount, который хранит баланс (balance).
Создай дочерний класс SavingsAccount, унаследованный от BankAccount. Добавь атрибут interest_rate.
Создай дочерний класс CreditCard, унаследованный от BankAccount. Добавь атрибут limit.
Определи метод withdraw(amount) для каждого класса:
Для SavingsAccount: нельзя снять больше 90% баланса.
Для CreditCard: нельзя снять сумму превышающую лимит.
Прочитай файл accounts.json и создай список объектов (SavingsAccount или CreditCard в зависимости от типа).
Вызови метод withdraw(amount) для каждого объекта.
'''

